# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- main
- refs/tags/release/*
- refs/pull/*

pool:
  vmImage: ubuntu-latest

variables:
  buildConfiguration: 'Release'
  dotnetVersion: 7.x
  dotnetIncludePreviewVersions: true
steps:
- task: PowerShell@2
  displayName: 'Set version number'
  inputs:
    targetType: 'inline'
    script: |
      $tag = "$(Build.SourceBranch)".Replace("refs/tags/release/","")
      $regexString = "^(0|[1-9]\d*)\.(0|[1-9]\d*)\.(0|[1-9]\d*)(-(0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(\.(0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*)?(\+[0-9a-zA-Z-]+(\.[0-9a-zA-Z-]+)*)?$"
      $regex = new-object System.Text.RegularExpressions.Regex ($regexString,[System.Text.RegularExpressions.RegexOptions]::MultiLine)
      Write-Host "Pushed tag is $tag"
      if ($tag -match $regex)
      {
        Write-Host "$tag conforms to semantic version; Setting Azure DevOps variable PACKAGE_VERSION..."
        Write-Host "##vso[build.addbuildtag]ReleaseBuild"
      }
      else
      {
        # Error out if the tag doesn't conform to semantic versioning standard
        Write-Host "$tag does not conform to semantic versioning"
        Write-Host "##vso[build.addbuildtag]ContinuouslyBuild"
        $tag = "0.0.0-nightly$(Build.BuildNumber)"
      }
      Write-Host "##vso[task.setvariable variable=PACKAGE_VERSION]$tag"
      Write-Host "PACKAGE_VERSION set to 0.0.0-nightly$(Build.BuildNumber)"
      
- task: UseDotNet@2
  displayName: Use .NET $(dotnetVersion)
  inputs:
    version: $(dotnetVersion)
    performMultiLevelLookup: true
    includePreviewVersions: $(dotnetIncludePreviewVersions)
      
- task: DotNetCoreCLI@2
  displayName: 'Build'
  inputs:
    command: 'build'
    arguments: '--configuration $(buildConfiguration)'
    
- task: DotNetCoreCLI@2
  displayName: 'Pack'
  inputs:
    command: 'pack'
    packagesToPack: '**/*.csproj'
    nobuild: true
    versioningScheme: 'byEnvVar'
    versionEnvVar: 'PACKAGE_VERSION'

- task: PublishBuildArtifacts@1
  displayName: 'Publish Artifacts'
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'NuGet'
    publishLocation: 'Container'